@inject StorageService storageService
@inject AudioService audioService
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

<div class="AppComponentContainer">
    <div class="AppComponentMain">
        <div class="DiagramContainer">
            <CascadingValue Value=steps>
                <CascadingValue Value="diagram">
                    <DiagramCanvas></DiagramCanvas>
                </CascadingValue>
            </CascadingValue>         
        </div>
    </div>
    <aside class="AsideOverview">
        <div class="ScenarioSection">
            <h3>Select a scenario to simulate:</h3>
            @foreach(var scenario in scenarios)
            {
                if(selectedScenario?.Id == scenario.Id)
                {
                    <div itemref="@scenario.Id" class="ScenarioContainer active" @onclick="() => SelectScenario(scenario)">
                        <h4>@scenario.Name</h4>
                        <h6>@scenario.ShortDescription</h6>
                    </div>
                }
                else
                {
                    <div itemref="@scenario.Id" class="ScenarioContainer" @onclick="() => SelectScenario(scenario)">
                        <h4>@scenario.Name</h4>
                        <h6>@scenario.ShortDescription</h6>
                    </div>
                }      
            }
        </div>
        <div class="LearningBadges">
            <h3>Learning badges:</h3>
            @foreach(var learningBage in learningBadges)
            {
                @if (learningBage.Solved)
                {
                    <div class="LearningBadgeContainer active">
                        <img src="@($"/LearningBadges/{learningBage.IconUri}")"/>
                        <h6 style="border-bottom: 2px solid black;">@learningBage.Description</h6>
                    </div>
                }
                else
                {
                    <div class="LearningBadgeContainer">
                        <img src="@($"/LearningBadges/{learningBage.IconUri}")"/>
                        <h6>@learningBage.Description</h6>
                    </div>
                }     
            }
        </div>
        <div class="CurrentScenarioSection">
            @foreach(var step in steps)
            {
                <div class="StepContainer">
                    @if(step.ScenarioRoleType == ScenarioRoleDTO.Victim)
                    {
                        <span style="font-weight: 700;">YourSelf: </span>
                    }
                    else
                    {
                        <span style="font-weight: 700;">@step.ScenarioRoleType: </span>
                    }
                    @step.EnglishMessage
                </div>
            }
            @if(steps?.Count > 0)
            {
                <button @onclick='() => ShowModal()'>Rate your Conversation</button>
            }
        </div>
    </aside>
</div>

@code{
    bool enabled = true;
    private bool c => localStorage.GetItem<object>("Achievement2") != null;
    private bool b => localStorage.GetItem<object>("Achievement1") != null;
    private void ShowModal()
    {
        enabled = false;
        localStorage.SetItem("Achievement1", "true");
        var v = new ModalParameters();
        v.Add("steps", steps);
        StateHasChanged();
        Modal.Show<ConversationRatingComponent>(string.Empty, v);
    }
    private ScenarioDTO loadedScenario;
    private string currentAudio;
    private ScenarioStepDTO scenarioStep;
    private string currentMessage;
    private List<ScenarioStepDTO> steps;
    private bool HasInformationComponent;
    private ScenarioDTO selectedScenario;
    public ScenarioDTO SelectedScenario
    {
        get
        {
            return selectedScenario;
        }
        set
        {
            selectedScenario = value;
            if (selectedScenario.ScenarioType == ScenarioTypeDTO.Bullying)
            {
                var v = diagram.Nodes.AsEnumerable().ToList();
                diagram.Nodes.Remove(v);
                Point one = new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) - 300);
                Point two = new Point((diagram.Container.Width / 2) - 460, (diagram.Container.Height / 2) - 200);
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Perpretator, one));
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Bystander, two));
                diagram.Nodes.Add(new UserNode(new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) + 100)));
            }
            if (selectedScenario.ScenarioType == ScenarioTypeDTO.Sexism)
            {
                var v = diagram.Nodes.AsEnumerable().ToList();
                diagram.Nodes.Remove(v);
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Perpretator, new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) - 300)));
                diagram.Nodes.Add(new UserNode(new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) + 100)));
            }
            if (selectedScenario.ScenarioType == ScenarioTypeDTO.SubtleSexism)
            {
                var v = diagram.Nodes.AsEnumerable().ToList();
                diagram.Nodes.Remove(v);
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Perpretator, new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) - 300)));
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Bystander, new Point((diagram.Container.Width / 2) - 260, (diagram.Container.Height / 2) - 40)));
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Bystander, new Point((diagram.Container.Width / 2) + 260, (diagram.Container.Height / 2))));
                diagram.Nodes.Add(new UserNode(new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) + 100)));
            }
            StateHasChanged();
        }
    }
    private Diagram diagram;
    List<LearningBadgeDTO> learningBadges = new List<LearningBadgeDTO>();
    List<ScenarioDTO> scenarios = new List<ScenarioDTO>();
    private bool microphone;
    protected override async Task OnInitializedAsync()
    {
        storageService.MicrophoneChanged += async b => { microphone = b; StateHasChanged(); };
        storageService.MessageChanged += async (m, OriginalLanguageIdentifier) =>
        {
            currentMessage = m;
            scenarioStep.ScenarioRoleType = ScenarioRoleDTO.Victim;
            scenarioStep.Message = currentMessage;
            scenarioStep.EnglishMessage = (await HttpClientService.GetFromAPIAsync<TranslationResultDTO>($"/translator/?name={currentMessage}&fromLanguage={OriginalLanguageIdentifier}")).Result;
            steps.Add(scenarioStep);
            StateHasChanged();
        };
        steps = new List<ScenarioStepDTO>();
        var options = new DiagramOptions
        {
            DeleteKey = "Delete",
            DefaultNodeComponent = null,
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom = new DiagramZoomOptions
            {
                Enabled = false
            },
            Links = new DiagramLinkOptions
            {
                DefaultColor = "black"
            }
        };

        diagram = new Diagram(options);
        await Task.Delay(500);
        StateHasChanged();

        learningBadges = await HttpClientService.GetFromAPIAsync<List<LearningBadgeDTO>>("/learningbadges");
        scenarios = await HttpClientService.GetFromAPIAsync<List<ScenarioDTO>>("/scenarios");

        if (b)
        {
            var t = learningBadges.First(l => l.Description == "Simulate the first situation");
            t.Solved = true;
        }
        if (c)
        {
            var t = learningBadges.First(l => l.Description == "Analyze your conversation");
            t.Solved = true;
        }

        diagram.RegisterModelComponent<InformationNode, InformationNodeComponent>();
        diagram.RegisterModelComponent<UserNode, UserComponent>();
        diagram.RegisterModelComponent<ScenarioMemberNode, ScenarioMemberComponent>();

        if(SelectedScenario == null)
        {
            diagram.Nodes.Add(new InformationNode(new Point((diagram.Container.Width / 2) - 100, (diagram.Container.Height / 2) - 40)));
        }
        else
        {
            diagram.Nodes.Add(new UserNode(new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) - 40)));
        }
        StateHasChanged();

        diagram.Links.Added += b =>
        {
            b.TargetPortChanged += (bt, old, niw) =>
            {
                if(bt.SourcePort.Parent is UserNode && (bt.TargetPort.Parent as ScenarioMemberNode)?.Role == ScenarioRoleDTO.Bystander)
                {
                    scenarioStep = new ScenarioStepDTO
                    {
                        Message = currentMessage,
                        UserSender = true,
                        ScenarioRoleType = ScenarioRoleDTO.Bystander
                    };
                }
                if (bt.SourcePort.Parent is UserNode && (bt.TargetPort.Parent as ScenarioMemberNode)?.Role == ScenarioRoleDTO.Perpretator)
                {
                    scenarioStep = new ScenarioStepDTO
                    {
                        Message = currentMessage,
                        UserSender = true,
                        ScenarioRoleType = ScenarioRoleDTO.Perpretator
                    };
                }
                StateHasChanged();
            };
        };
    }
    public async Task SelectScenario(ScenarioDTO scenario)
    {
        steps = new List<ScenarioStepDTO>();
        var parameters = new ModalParameters();
        parameters.Add("Scenario", scenario);
        Func<ScenarioDTO, Task> scenarioCallback = async (s) => 
        {
            enabled = true;
            var parameters = new ModalParameters();
            parameters.Add("Scenario", scenario);
            Modal.Show<CountDowmModal>(string.Empty, parameters);
            await Task.Delay(10000);
            SelectedScenario = s;
            loadedScenario = await HttpClientService.GetFromAPIAsync<ScenarioDTO>($"/scenarios/{s.Id}");
            currentAudio = await GetTranslation(s.Language, loadedScenario.ScenarioSteps.First().Message);
            audioService.ShowAudio(ScenarioRoleDTO.Perpretator, currentAudio);
            steps.Add(new ScenarioStepDTO
            {
                EnglishMessage = loadedScenario.ScenarioSteps.First().Message,
                ScenarioRoleType = loadedScenario.ScenarioSteps.First().ScenarioRoleType
            });
            StateHasChanged();

            FireForget();
        };
        parameters.Add("Scenario", scenario);
        parameters.Add("ScenarioSelectedCallback", scenarioCallback);
        Modal.Show<SelectScenarioModal>(string.Empty, parameters);
    }
    private async Task RedrawDiagram()
    {
        var options = new DiagramOptions
        {
            DeleteKey = "Delete",
            DefaultNodeComponent = null,
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom = new DiagramZoomOptions
            {
                Enabled = false
            },
            Links = new DiagramLinkOptions
            {
                DefaultColor = "black"
            }
        };

        diagram = new Diagram(options);
        await Task.Delay(200);
        StateHasChanged();
    }
    private async Task<string> GetTranslation(string language, string text)
    {
        return (await HttpClientService.GetFromAPIAsync<TranslationResultDTO>($"/translator/speech/?language={language}&text={text}")).Result;
    }
    private int count;
    public async Task FireForget()
    {
        while (count < 4)
        {
            await Task.Delay(new Random().Next(15000, 25000));
            Console.WriteLine(90);
            if(microphone == false && enabled)
            {
                string word = diks[loadedScenario.Name][count];
                currentAudio = await GetTranslation(SelectedScenario.Language, word);
                audioService.ShowAudio(ScenarioRoleDTO.Perpretator, currentAudio);
                steps.Add(new ScenarioStepDTO
                {
                    EnglishMessage = diks[loadedScenario.Name][count],
                    ScenarioRoleType = ScenarioRoleDTO.Perpretator
                });
                StateHasChanged();
            }
            count++;
        }
    }
    Dictionary<string, List<string>> diks = new Dictionary<string, List<string>>()
    {
        ["Bullying"] = new List<string>{"You are bad for the company", "I wish you bad luck", "Youre a bad guy", ""},
        ["Subtle Sexism"] = new List<string>{"Please wear the same things tomorrow", "We need to work more together", "", ""},
        ["Sexism"] = new List<string>{"Please wear shorter things", "I cant wait for summer to see your legs", "Your tits look good", ""}
    };
    Dictionary<string, List<string>> standerdiks = new Dictionary<string, List<string>>()
    {
        ["Bullying"] = new List<string>{"You are bad for the company", "I wish you bad luck", "Youre a bad guy", ""},
        ["Subtle Sexism"] = new List<string>{"Please wear the same things tomorrow", "We need to work more together", "", ""},
        ["Sexism"] = new List<string>{"Please wear shorter things", "I cant wait for summer to see your legs", "Your tits look good", ""}
    };
}