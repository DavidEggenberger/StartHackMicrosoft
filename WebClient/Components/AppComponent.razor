<div class="AppComponentContainer">
    <div class="AppComponentMain">
        <div class="DiagramContainer">
            <CascadingValue Value="diagram">
                <DiagramCanvas></DiagramCanvas>
            </CascadingValue>
        </div>
    </div>
    <aside class="AsideOverview">
        <div class="ScenarioSection">
            <h3>Select a scenario to simulate:</h3>
            @foreach(var scenario in scenarios)
            {
                if(selectedScenario?.Id == scenario.Id)
                {
                    <div itemref="@scenario.Id" class="ScenarioContainer active" @onclick="() => SelectScenario(scenario)">
                        <h4>@scenario.Name</h4>
                        <h6>@scenario.ShortDescription</h6>
                    </div>
                }
                else
                {
                    <div itemref="@scenario.Id" class="ScenarioContainer" @onclick="() => SelectScenario(scenario)">
                        <h4>@scenario.Name</h4>
                        <h6>@scenario.ShortDescription</h6>
                    </div>
                }      
            }
        </div>
        <div class="LearningBadges">
            <h3>Learning badges:</h3>
            @foreach(var learningBage in learningBadges)
            {
                <div class="LearningBadgeContainer">
                    <img src="@($"/LearningBadges/{learningBage.IconUri}")"/>
                </div>
            }
        </div>
    </aside>
</div>

@code{
    private ScenarioDTO selectedScenario = new ScenarioDTO();
    public ScenarioDTO SelectedScenario
    {
        get
        {
            return selectedScenario;
        }
        set
        {
            selectedScenario = value;
        }
    }
    private Diagram diagram;
    List<LearningBadgeDTO> learningBadges = new List<LearningBadgeDTO>();
    List<ScenarioDTO> scenarios = new List<ScenarioDTO>();
    protected override async Task OnInitializedAsync()
    {
        var options = new DiagramOptions
        {
            DeleteKey = "Delete",
            DefaultNodeComponent = null,
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom = new DiagramZoomOptions
            {
                Enabled = false
            },
            Links = new DiagramLinkOptions
            {
                DefaultColor = "black"
            }
        };

        diagram = new Diagram(options);
        await Task.Delay(100);
        learningBadges = await HttpClientService.GetFromAPIAsync<List<LearningBadgeDTO>>("/learningbadges");
        scenarios = await HttpClientService.GetFromAPIAsync<List<ScenarioDTO>>("/scenarios");
        StateHasChanged();

        if(SelectedScenario == null)
        {
            diagram.RegisterModelComponent<ScenarioMemberNode, ScenarioMemberComponent>();
            diagram.RegisterModelComponent<UserNode, UserComponent>();
        }

        diagram.Nodes.Add(new UserNode(new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) - 40)));
        StateHasChanged();
    }
    public async Task SelectScenario(ScenarioDTO scenario)
    {
        var parameters = new ModalParameters();
        parameters.Add("Scenario", scenario);
        Action<ScenarioDTO> scenarioCallback = (s) => { SelectedScenario = s; StateHasChanged(); };
        parameters.Add("Scenario", scenario);
        parameters.Add("ScenarioSelectedCallback", scenarioCallback);
        Modal.Show<SelectScenarioModal>(string.Empty, parameters);
    }
}