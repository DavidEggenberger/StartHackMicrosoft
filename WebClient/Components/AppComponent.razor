@inject StorageService storageService

<div class="AppComponentContainer">
    <div class="AppComponentMain">
        <div class="DiagramContainer">
            <CascadingValue Value="diagram">
                <DiagramCanvas></DiagramCanvas>
            </CascadingValue>
        </div>
    </div>
    <aside class="AsideOverview">
        <div class="ScenarioSection">
            <h3>Select a scenario to simulate:</h3>
            @foreach(var scenario in scenarios)
            {
                if(selectedScenario?.Id == scenario.Id)
                {
                    <div itemref="@scenario.Id" class="ScenarioContainer active" @onclick="() => SelectScenario(scenario)">
                        <h4>@scenario.Name</h4>
                        <h6>@scenario.ShortDescription</h6>
                    </div>
                }
                else
                {
                    <div itemref="@scenario.Id" class="ScenarioContainer" @onclick="() => SelectScenario(scenario)">
                        <h4>@scenario.Name</h4>
                        <h6>@scenario.ShortDescription</h6>
                    </div>
                }      
            }
        </div>
        <div class="LearningBadges">
            <h3>Learning badges:</h3>
            @foreach(var learningBage in learningBadges)
            {
                <div class="LearningBadgeContainer">
                    <img src="@($"/LearningBadges/{learningBage.IconUri}")"/>
                    <h6>@learningBage.Description</h6>
                </div>
            }
        </div>
        <div class="CurrentScenarioSection">
            @foreach(var step in steps)
            {
                <div class="StepContainer">
                    @step.ScenarioRoleType
                    @step.Message
                    @step.EnglishMessage
                </div>
            }
        </div>
    </aside>
</div>

@code{
    private ScenarioStepDTO scenarioStep;
    private string currentMessage;
    private List<ScenarioStepDTO> steps;
    private bool HasInformationComponent;
    private ScenarioDTO selectedScenario;
    public ScenarioDTO SelectedScenario
    {
        get
        {
            return selectedScenario;
        }
        set
        {
            selectedScenario = value;
            if (selectedScenario.ScenarioType == ScenarioTypeDTO.Bullying)
            {
                var v = diagram.Nodes.AsEnumerable().ToList();
                diagram.Nodes.Remove(v);
                Point one = new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) - 300);
                Point two = new Point((diagram.Container.Width / 2) - 460, (diagram.Container.Height / 2) - 200);
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Perpretator, one));
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Bystander, two));
                diagram.Nodes.Add(new UserNode(new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) + 100)));
            }
            if (selectedScenario.ScenarioType == ScenarioTypeDTO.Sexism)
            {
                var v = diagram.Nodes.AsEnumerable().ToList();
                diagram.Nodes.Remove(v);
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Perpretator, new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) - 300)));
                diagram.Nodes.Add(new UserNode(new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) + 100)));
            }
            if (selectedScenario.ScenarioType == ScenarioTypeDTO.SubtleSexism)
            {
                var v = diagram.Nodes.AsEnumerable().ToList();
                diagram.Nodes.Remove(v);
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Perpretator, new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) - 300)));
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Bystander, new Point((diagram.Container.Width / 2) - 260, (diagram.Container.Height / 2) - 40)));
                diagram.Nodes.Add(new ScenarioMemberNode(ScenarioRoleDTO.Bystander, new Point((diagram.Container.Width / 2) + 260, (diagram.Container.Height / 2))));
                diagram.Nodes.Add(new UserNode(new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) + 100)));
            }
            StateHasChanged();
        }
    }
    private Diagram diagram;
    List<LearningBadgeDTO> learningBadges = new List<LearningBadgeDTO>();
    List<ScenarioDTO> scenarios = new List<ScenarioDTO>();
    protected override async Task OnInitializedAsync()
    {
        storageService.MessageChanged += async (m, OriginalLanguageIdentifier) =>
        {
            currentMessage = m;
            scenarioStep.Message = currentMessage;
            scenarioStep.EnglishMessage = (await HttpClientService.GetFromAPIAsync<TranslationResultDTO>($"/translator/?name={currentMessage}&fromLanguage={OriginalLanguageIdentifier}")).Result;
            steps.Add(scenarioStep);
            StateHasChanged();
        };
        steps = new List<ScenarioStepDTO>();
        var options = new DiagramOptions
        {
            DeleteKey = "Delete",
            DefaultNodeComponent = null,
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom = new DiagramZoomOptions
            {
                Enabled = false
            },
            Links = new DiagramLinkOptions
            {
                DefaultColor = "black"
            }
        };

        diagram = new Diagram(options);
        await Task.Delay(500);
        StateHasChanged();

        learningBadges = await HttpClientService.GetFromAPIAsync<List<LearningBadgeDTO>>("/learningbadges");
        scenarios = await HttpClientService.GetFromAPIAsync<List<ScenarioDTO>>("/scenarios");

        diagram.RegisterModelComponent<InformationNode, InformationNodeComponent>();
        diagram.RegisterModelComponent<UserNode, UserComponent>();
        diagram.RegisterModelComponent<ScenarioMemberNode, ScenarioMemberComponent>();

        if(SelectedScenario == null)
        {
            diagram.Nodes.Add(new InformationNode(new Point((diagram.Container.Width / 2) - 100, (diagram.Container.Height / 2) - 40)));
        }
        else
        {
            diagram.Nodes.Add(new UserNode(new Point((diagram.Container.Width / 2) - 60, (diagram.Container.Height / 2) - 40)));
        }
        StateHasChanged();

        diagram.Links.Added += b =>
        {
            b.TargetPortChanged += (bt, old, niw) =>
            {
                if(bt.SourcePort.Parent is UserNode && (bt.TargetPort.Parent as ScenarioMemberNode)?.Role == ScenarioRoleDTO.Bystander)
                {
                    scenarioStep = new ScenarioStepDTO
                    {
                        Message = currentMessage,
                        UserSender = true,
                        ScenarioRoleType = ScenarioRoleDTO.Bystander
                    };
                }
                if (bt.SourcePort.Parent is UserNode && (bt.TargetPort.Parent as ScenarioMemberNode)?.Role == ScenarioRoleDTO.Perpretator)
                {
                    scenarioStep = new ScenarioStepDTO
                    {
                        Message = currentMessage,
                        UserSender = true,
                        ScenarioRoleType = ScenarioRoleDTO.Perpretator
                    };
                }
                StateHasChanged();
            };
        };
    }
    public async Task SelectScenario(ScenarioDTO scenario)
    {
        steps = new List<ScenarioStepDTO>();
        var parameters = new ModalParameters();
        parameters.Add("Scenario", scenario);
        Func<ScenarioDTO, Task> scenarioCallback = async (s) => 
        { 
            var parameters = new ModalParameters();
            parameters.Add("Scenario", scenario);
            Modal.Show<CountDowmModal>(string.Empty, parameters);
            SelectedScenario = s;
            await HttpClientService.GetFromAPIAsync<TranslationResultDTO>($"/translator/speech/?language={SelectedScenario.Language}&text={selectedScenario.ShortDescription}");
            StateHasChanged();
        };
        parameters.Add("Scenario", scenario);
        parameters.Add("ScenarioSelectedCallback", scenarioCallback);
        Modal.Show<SelectScenarioModal>(string.Empty, parameters);
    }
    private async Task RedrawDiagram()
    {
        var options = new DiagramOptions
        {
            DeleteKey = "Delete",
            DefaultNodeComponent = null,
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom = new DiagramZoomOptions
            {
                Enabled = false
            },
            Links = new DiagramLinkOptions
            {
                DefaultColor = "black"
            }
        };

        diagram = new Diagram(options);
        await Task.Delay(200);
        StateHasChanged();
    }
}