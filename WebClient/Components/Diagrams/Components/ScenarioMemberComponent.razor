@inject AudioService audioService
<div class="card">
    <div style="width: 100%; display: grid; place-content: center;">
        @if(Node.Role == ScenarioRoleDTO.Perpretator)
        {
            <h3 style="color: red;">@Node.Role</h3>
        }
        else
        {
            <h3 style="color: orange;">@Node.Role</h3>
        }
    </div>
    @if(audio != null)
    {
        <audio id="audio" type="audio/wav" src="@audio"></audio>
    }
    @foreach (var port in Node.Ports)
    {
        <PortRenderer Port="port" />
    }
</div>

@code {
    private string audio;
    [CascadingParameter]
    public List<ScenarioStepDTO> steps { get; set; }
    [Parameter]
    public ScenarioMemberNode Node { get; set; }
    protected override async Task OnInitializedAsync()
    {
        audioService.ShowAudioEvent += async (role, uri) =>
        {
            if(Node.Role == role)
            {
                audio = uri;
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("startAudio");
                StateHasChanged();
            }
        };
    }
}
